#include <bits/stdc++.h>
using namespace std;
void bellman_ford(vector<vector<int>>& g,int src){
  int n=g.size();
  vector<int> dist(n+1, INT_MAX);
  dist[src]=0;

  // v-1 times iterations
  for(int i=0; i<n-1; i++){

    for(auto edge:g){
      int u=edge[0], v=edge[1], wt=edge[2];
      if(dist[u]!=INT_MAX and dist[v]>wt+dist[u])
        dist[v]=wt+dist[u];
    }
  }
  // Check for -ve cycle
  for(auto edge: g){
    int u=edge[0], v=edge[1], wt=edge[2];
    if(dist[u]!=INT_MAX and dist[v]>dist[u]+wt){
      cout<<"negative Cycle is presnt"<<endl;
      exit(0);
    }
  }
  for(auto x: dist)
    cout<<x<<" ";
  return;
}
int main(){
  vector<vector<int>> edge;
  int n;cin>>n;
  for(int i=0; i<n; i++){
    int x,y,wt;cin>>x>>y>>wt;
    edge.push_back({x, y, wt});
  }
  bellman_ford(edge,1);
}