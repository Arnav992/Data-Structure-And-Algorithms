#include <bits/stdc++.h>
using namespace std;
class Graph{
  int V;
  vector<pair<int,int>> *l;
public : 
  Graph(int n){
    V=n;
    l =new vector<pair<int,int>> [n];
  }
  void add_edge(int x,int y,int wt){
    l[x].push_back({y, wt});
    l[y].push_back({x, wt});
  }
  int prims_mst(){
    int ans=0;
    vector<bool> visited(V, false);
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> Q;
    Q.push({0, 0});

    while(!Q.empty()){
      auto best=Q.top();Q.pop();

      int node=best.second;
      int wt=best.first;

      if(visited[node]==true)
        continue;
      visited[node]=true;
      ans+=wt;

      for(auto x:l[node]){
        if(!visited[x.first])
          Q.push({x.second, x.first});
      }
    }
    return ans;
  }
};
int main(){
  Graph g(6);
  g.add_edge(0, 1, 1);
  g.add_edge(3, 1, 1);
  g.add_edge(2, 4, 1);
  g.add_edge(0, 2, 2);
  g.add_edge(2, 3, 2);
  g.add_edge(3, 4, 2);
  g.add_edge(1, 2, 3);
  g.add_edge(1, 4, 3);
  g.add_edge(4, 5, 3);
  g.add_edge(5, 3, 4);

  cout<<g.prims_mst()<<endl;
}