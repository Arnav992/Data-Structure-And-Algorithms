#include <bits/stdc++.h>
using namespace std;
unordered_map<int, vector<int>> g;
void dfs(int src, vector<int>&dis,vector<int>&low,vector<bool>&st,stack<int>& mystack){
  static int time=0;
  dis[src]=low[src]=time,st[src]=true,mystack.push(src);time+=1;

  for(int x:g[src]){
    if(dis[x]==-1){
      dfs(x, dis, low, st, mystack);
      low[src]=min(low[x], low[src]);
    }
    // Presence of Back edge
    if(st[x])low[src]=min(low[src], dis[x]);
  }

  if(dis[src]==low[src]){
    while(mystack.top()!=src)
      st[mystack.top()]=false,cout<<mystack.top()<<" ", mystack.pop();

    cout<<mystack.top()<<endl;
    st[mystack.top()]=false;
    mystack.pop();
  }
  return ;
}
void tarjan_algo_scc(int n){
  vector<int> dis(n, -1), low(n, -1);
  vector<bool> st(n, false);
  stack<int> mystack;

  for(int i=0; i<n; i++)
    if(dis[i]==-1)
      dfs(i, dis, low, st,mystack);
  return;
}
int main(){
  g[0].push_back(1);
  g[1].push_back(2);
  g[1].push_back(3);
  g[3].push_back(4);
  g[4].push_back(0);
  g[4].push_back(6);
  g[4].push_back(5);
  g[5].push_back(6);
  g[6].push_back(5);
  g[5].push_back(2);

  tarjan_algo_scc(7);
  return 0;
}